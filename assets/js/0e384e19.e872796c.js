"use strict";(self.webpackChunkdumpster_api=self.webpackChunkdumpster_api||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},i="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),i=p(n),m=r,h=i["".concat(d,".").concat(m)]||i[m]||c[m]||l;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[i]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>i,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:1},o="Dumpster",s={unversionedId:"intro",id:"intro",title:"Dumpster",description:"Dumpster is a garbage collection utility package. It is helpful for realtime tracking & cleaning! Say no to memory leaks.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/Dumpster-API/docs/intro",draft:!1,editUrl:"https://github.com/KinqAndi/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar"},d={},p=[{value:".new",id:"new",level:3},{value:"Examples",id:"examples",level:4},{value:"Extend",id:"extend",level:3},{value:"Examples",id:"examples-1",level:4},{value:"Construct",id:"construct",level:3},{value:"Examples",id:"examples-2",level:4},{value:"Clone",id:"clone",level:3},{value:"Examples",id:"examples-3",level:4},{value:"Add",id:"add",level:3},{value:"Examples",id:"examples-4",level:4},{value:"Remove",id:"remove",level:3},{value:"Examples",id:"examples-5",level:4},{value:"AddPromise",id:"addpromise",level:3},{value:"Examples",id:"examples-6",level:4},{value:"Connect",id:"connect",level:3},{value:"Examples",id:"examples-7",level:4},{value:"AttachTo",id:"attachto",level:3},{value:"Examples",id:"examples-8",level:4},{value:"BindToRenderStep",id:"bindtorenderstep",level:3},{value:"Examples",id:"examples-9",level:4},{value:"UnbindFromRenderStep",id:"unbindfromrenderstep",level:3},{value:"Examples",id:"examples-10",level:4},{value:"Clean",id:"clean",level:3},{value:"Examples",id:"examples-11",level:4},{value:"Destroy",id:"destroy",level:3},{value:"Examples",id:"examples-12",level:4}],u={toc:p};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dumpster"},"Dumpster"),(0,r.kt)("p",null,"Dumpster is a garbage collection utility package. It is helpful for realtime tracking & cleaning! Say no to memory leaks."),(0,r.kt)("h3",{id:"new"},".new"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster.new() \u2192 Dumpster\n")),(0,r.kt)("p",null,"Constructs/Creates a Dumpster Class"),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local dumpster = Dumpster.new()\n--creates a new dumpster class that you can dump connections/instances for garbage collection purposes.\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"extend"},"Extend"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Extend() \u2192 Dumpster\n")),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local dumpster = Dumpster.new()\nlocal subDumpster = dumpster:Extend()\nsubDumpster:Add(part)\n--creates a sub dumpster class, and adds it to the main dumpster. Will be destroyed once main dumpster is destroyed.\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Extends the dumpster and adds it for cleanup. Returns the extended Dumpster."),(0,r.kt)("h3",{id:"construct"},"Construct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Construct(object: string | table | () \u2192 (), ...) \u2192 any?\n")),(0,r.kt)("p",null,"Constructs a new Instance/Class from the given parameter.\nIf a table is passed, it will construct a new class of said table that has the constructor .new(...)\nAnd proceeds to add the constructed item to the Dumpster."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local weaponModule = require(script.Parent.Weapon)\n\nlocal dumpster = Dumpster.new()--constructing a new dumpster\nlocal weapon = dumpster:Construct(weaponModule, 3, Color3.fromRGB(255,255,255))\n\nweapon.Name = "AK-47"\n--constructs a class and adds it to the dumpster\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"clone"},"Clone"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Clone(item: Instance) \u2192 Instance\n")),(0,r.kt)("p",null,"Clones an Instance, and adds it to the dumpster for cleanup."),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local part = workspace.Part -- referencing a random part\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\nlocal clonedPart = dumpster:Clone(part)\nclonedPart.Name = "MyClonedPart"\nclonedPart.Parent = workspace\n--clones an instance and adds it to the dumpster\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"add"},"Add"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Add(object: any, cleanUpIdentifier: string?, customCleanupMethod: string?) \u2192 any\n")),(0,r.kt)("p",null,"Adds an object to the dumpster."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"object - The object you want to add for cleanup."),(0,r.kt)("li",{parentName:"ul"},"cleanUpIdentifier - will be used to identify your object."),(0,r.kt)("li",{parentName:"ul"},"customCleanupMethod - use if you are adding your own class and the cleanup method is not called :Destroy().")),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Add(part) -- this part will be deleted once the dumpster has been destroyed.\n\ndumpster:Add(function() -- this will run once the dumpster has been destroyed.\n    print("I have been destroyed :(")\nend)\n\ndumpster:Add(button.Activated:Connect(function() -- this will disconnect the connection once the dumpster has been destroyed.\n    --button has been clicked\nend))\n\n--We can also add instances/classes with extra paremeters\n\ndumpster:Add(weapon, "myWeapon") -- the second argument gives your object an identfier so it could be removed from :Remove method in realtime.\n\n--There is also a third argument, "customCleanupMethod" which is for custom clean up methods for modules.\n--Let\'s say the weaponModule has a cleanup method called :Explode()\n--To add it for cleanup we can do the following:\n\ndumpster:Add(weapon, "myWeapon", "Explode")\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"remove"},"Remove"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Remove(object: any, dontCallCleanMethod: boolean?) \u2192 any\n")),(0,r.kt)("p",null,"Attempts to remove the provided object from the dumpster."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'if your object is a function, and you do not want it to be called, simply set the value of paremeter "dontCallCleanMethod" to true.')),(0,r.kt)("h4",{id:"examples-5"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local part = workspace.Part -- referencing random part\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Add(part, "randomPart")\n\ndumpster:Remove("randomPart") -- NOTE: You can also pass in the object itself.\n\ndumpster:Destroy()\n\n--Once the dumpster is destroyed, since we removed it from memory. the referenced part will no longer be deleted.\n')),(0,r.kt)("p",null,"Let's look at another example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Add(function()\n    print("i have been destroyed")\nend, "myFunction")\n\ndumpster:Remove("myFunction")\n\n--Then the function being removed from the dumpster will be ran\n--So the output would be "i have been destroyed"\n\n--HOWEVER, by passing a new argument in as a boolean, you can disregard this function by doing the following\n\ndumpster:Add(function()\n    print("i have been destroyed")\nend, "myFunction")\n\ndumpster:Remove("myFunction", true)\n\n--Now, this function will no longer run.\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"addpromise"},"AddPromise"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:AddPromise(promise: Promise, cleanUpIdentifier: string?) \u2192 Instance\n")),(0,r.kt)("p",null,"Adds a promise to the dumpster for cleanup."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cleanUpIdentifier - will be used to identify your object.")),(0,r.kt)("h4",{id:"examples-6"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local Promise = require(script.Promise) -- Promise Utility Package\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\nlocal newPromise = Promise.new(function(resolve, reject)--Creating a new promise class\n    --some code here.\nend)\n\ndumpster:Add(newPromise) --Adds the promise to the dumpster, will cancel once the dumpster is destroyed.\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"connect"},"Connect"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Connect(signal: RBXScriptSignal, connectFunction: (any)\u2192(any)) \u2192 any\n")),(0,r.kt)("p",null,"Creates a connection and automatically adds it to the dumpster based on the signal provided along with the callback function."),(0,r.kt)("h4",{id:"examples-7"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Connect(button.Activated, function()\n    --button has been activated\nend) \n-- creates a new connection for the signal that calls the function. Automatically adds it to the dumpster for cleanup.\n--Wrapper for :Add\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"attachto"},"AttachTo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:AttachTo(item: any) \u2192 ()\n")),(0,r.kt)("p",null,"Attaches a dumpster to an Instance, TweenBase, Sound or AnimationTrack. Once the object's lifespan has ended, dumpster will be destroyed."),(0,r.kt)("h4",{id:"examples-8"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local part = workspace.Part -- referencing some random part\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Add(function()\n    print("I have been destroyed.")\nend)\n\ndumpster:AttachTo(part)\n\npart:Destroy()\n--Since the dumpster is attached to the part, and the part just got destroyed. That means the dumpster would be destroyed as well.\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Dumpsters could be Attached To ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/Instance"},(0,r.kt)("strong",{parentName:"a"},"Instances")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/AnimationTrack"},(0,r.kt)("strong",{parentName:"a"},"AnimationTracks")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/Sound"},(0,r.kt)("strong",{parentName:"a"},"Sound")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/Tween"},(0,r.kt)("strong",{parentName:"a"},"Tweens")),",")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"bindtorenderstep"},"BindToRenderStep"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:BindToRenderStep(name: string, priority: number, func: (dt: number)->(any)) \u2192 ()\n")),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"RunService:BindToRenderStep(...)"),", however ",(0,r.kt)("inlineCode",{parentName:"p"},"RunService:UnbindFromRenderStep")," will be called once the dumpster is destroyed."),(0,r.kt)("h4",{id:"examples-9"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'--Note this will only run if the dumpster is created on the client.\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:BindToRenderStep("cameraMovement", Enum.RenderPriority.Camera.Value-1, function(deltaTime: number)\n    workspace.CurrentCamera.CFrame = CFrame.lookAt(Vector3.new(0,0,0), Vector3.new(0,0,5))\nend)\n--This will bind the function to render stepped.\n--Will automaticall be unbinded once the dumpster has been destroyed.\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"unbindfromrenderstep"},"UnbindFromRenderStep"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:UnbindFromRenderStep(name: string) \u2192 ()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RunService:UnbindFromRenderStep")," will be called.")),(0,r.kt)("h4",{id:"examples-10"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'--Note this will only run if the dumpster is created on the client.\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:BindToRenderStep("cameraMovement", Enum.RenderPriority.Camera.Value-1, function(deltaTime: number)\n    workspace.CurrentCamera.CFrame = CFrame.lookAt(Vector3.new(0,0,0), Vector3.new(0,0,5))\nend)\n--Let\'s take the code from above, and let\'s now unbind it.\n\ndumpster:UnbindFromRenderStep("cameraMovement")\n--The function is no longer binded to render stepped.\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"clean"},"Clean"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Clean() \u2192 ()\n")),(0,r.kt)("p",null,"Alias for :Destroy()"),(0,r.kt)("h4",{id:"examples-11"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"--Note this will only run if the dumpster is created on the client.\nlocal part = workspace.Part -- referencing some random part\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Add(part)\ndumpster:Clean()\n--:Clean is an alias for :Destroy, therefore it will destroy the dumpster and clean up objects added to it.\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"destroy"},"Destroy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Dumpster:Destroy() \u2192 ()\n")),(0,r.kt)("p",null,"Cleans up and destroys the dumpster."),(0,r.kt)("h4",{id:"examples-12"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"--Note this will only run if the dumpster is created on the client.\nlocal part = workspace.Part -- referencing some random part\nlocal dumpster = Dumpster.new()--constructing a new dumpster\n\ndumpster:Add(part)\ndumpster:Destroy()\n--It will destroy the dumpster and clean up objects added to it.\n")))}i.isMDXComponent=!0}}]);